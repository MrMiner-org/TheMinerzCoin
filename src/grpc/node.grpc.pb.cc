// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: specs/node.proto

#include "specs/node.pb.h"
#include "specs/node.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace theminerzcoin {

static const char* Node_method_names[] = {
  "/theminerzcoin.Node/GetBlock",
  "/theminerzcoin.Node/BroadcastTransaction",
};

std::unique_ptr< Node::Stub> Node::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Node::Stub> stub(new Node::Stub(channel, options));
  return stub;
}

Node::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBlock_(Node_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BroadcastTransaction_(Node_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Node::Stub::GetBlock(::grpc::ClientContext* context, const ::theminerzcoin::BlockRequest& request, ::theminerzcoin::BlockReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::theminerzcoin::BlockRequest, ::theminerzcoin::BlockReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlock_, context, request, response);
}

void Node::Stub::async::GetBlock(::grpc::ClientContext* context, const ::theminerzcoin::BlockRequest* request, ::theminerzcoin::BlockReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::theminerzcoin::BlockRequest, ::theminerzcoin::BlockReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, std::move(f));
}

void Node::Stub::async::GetBlock(::grpc::ClientContext* context, const ::theminerzcoin::BlockRequest* request, ::theminerzcoin::BlockReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::theminerzcoin::BlockReply>* Node::Stub::PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::theminerzcoin::BlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::theminerzcoin::BlockReply, ::theminerzcoin::BlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::theminerzcoin::BlockReply>* Node::Stub::AsyncGetBlockRaw(::grpc::ClientContext* context, const ::theminerzcoin::BlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Node::Stub::BroadcastTransaction(::grpc::ClientContext* context, const ::theminerzcoin::RawTransaction& request, ::theminerzcoin::BroadcastReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::theminerzcoin::RawTransaction, ::theminerzcoin::BroadcastReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BroadcastTransaction_, context, request, response);
}

void Node::Stub::async::BroadcastTransaction(::grpc::ClientContext* context, const ::theminerzcoin::RawTransaction* request, ::theminerzcoin::BroadcastReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::theminerzcoin::RawTransaction, ::theminerzcoin::BroadcastReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BroadcastTransaction_, context, request, response, std::move(f));
}

void Node::Stub::async::BroadcastTransaction(::grpc::ClientContext* context, const ::theminerzcoin::RawTransaction* request, ::theminerzcoin::BroadcastReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BroadcastTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::theminerzcoin::BroadcastReply>* Node::Stub::PrepareAsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::theminerzcoin::RawTransaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::theminerzcoin::BroadcastReply, ::theminerzcoin::RawTransaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BroadcastTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::theminerzcoin::BroadcastReply>* Node::Stub::AsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::theminerzcoin::RawTransaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBroadcastTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

Node::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::theminerzcoin::BlockRequest, ::theminerzcoin::BlockReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Node::Service* service,
             ::grpc::ServerContext* ctx,
             const ::theminerzcoin::BlockRequest* req,
             ::theminerzcoin::BlockReply* resp) {
               return service->GetBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::theminerzcoin::RawTransaction, ::theminerzcoin::BroadcastReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Node::Service* service,
             ::grpc::ServerContext* ctx,
             const ::theminerzcoin::RawTransaction* req,
             ::theminerzcoin::BroadcastReply* resp) {
               return service->BroadcastTransaction(ctx, req, resp);
             }, this)));
}

Node::Service::~Service() {
}

::grpc::Status Node::Service::GetBlock(::grpc::ServerContext* context, const ::theminerzcoin::BlockRequest* request, ::theminerzcoin::BlockReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::BroadcastTransaction(::grpc::ServerContext* context, const ::theminerzcoin::RawTransaction* request, ::theminerzcoin::BroadcastReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace theminerzcoin

