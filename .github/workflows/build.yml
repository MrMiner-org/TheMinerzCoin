name: CI
on: [push, pull_request]
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2025]
        sanitizer: [none, address, undefined]
    runs-on: ${{ matrix.os }}
    steps:
    - if: matrix.sanitizer != 'none'
      name: Set sanitizer flags
      run: |
        echo "CFLAGS=-fsanitize=${{ matrix.sanitizer }}" >> $GITHUB_ENV
        echo "CXXFLAGS=-fsanitize=${{ matrix.sanitizer }}" >> $GITHUB_ENV
        echo "LDFLAGS=-fsanitize=${{ matrix.sanitizer }}" >> $GITHUB_ENV
    - uses: actions/checkout@v4
    - name: Install Clang 18
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-18 lld-18
        echo "CC=clang-18" >> $GITHUB_ENV
        echo "CXX=clang++-18" >> $GITHUB_ENV
        echo "CFLAGS=$CFLAGS -flto -fprofile-generate" >> $GITHUB_ENV
        echo "CXXFLAGS=$CXXFLAGS -flto -fprofile-generate" >> $GITHUB_ENV
        echo "LDFLAGS=$LDFLAGS -flto" >> $GITHUB_ENV
    - name: Install Clang 18 (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install llvm@18
        echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV
        echo "PATH=$(brew --prefix llvm@18)/bin:$PATH" >> $GITHUB_PATH
        echo "CFLAGS=$CFLAGS -flto -fprofile-generate" >> $GITHUB_ENV
        echo "CXXFLAGS=$CXXFLAGS -flto -fprofile-generate" >> $GITHUB_ENV
        echo "LDFLAGS=$LDFLAGS -flto" >> $GITHUB_ENV
    - name: Install Clang 18 (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install llvm --version=18.1.0 -y
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        echo "CFLAGS=%CFLAGS% -flto -fprofile-generate" >> $GITHUB_ENV
        echo "CXXFLAGS=%CXXFLAGS% -flto -fprofile-generate" >> $GITHUB_ENV
        echo "LDFLAGS=%LDFLAGS% -flto" >> $GITHUB_ENV
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install lint dependencies
      run: pip install ruff
    - name: Lint Python files
      run: ruff check contrib/**/*.py qa/**/*.py *.py
    - name: Configure
      run: cmake -S . -B build
    - name: Build
      run: cmake --build build -j2
    - name: Test
      run: cmake --build build --target check

  fuzz:
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2025]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Configure fuzzers
      run: cmake -S . -B fuzz_build -DCMAKE_CXX_FLAGS="-fsanitize=fuzzer,address" -DCMAKE_C_FLAGS="-fsanitize=fuzzer,address"
    - name: Build fuzzers
      run: cmake --build fuzz_build -j2
    - name: Run fuzzers
      run: |
        for f in fuzz_build/src/test/fuzz/*_fuzz; do
          "$f" -runs=1;
        done
